<PRD Phase 3: 일기장 앱 프론트엔드 로직 및 API 연동>

1. 목표: public/script.js 파일에 모든 로직을 구현하여 Full-Stack 일기장 앱을 완성한다.

2. 구현 방식:
- DOMContentLoaded 리스너 안에서 모든 로직을 시작한다.
- 뷰 전환을 담당하는 showView(viewId) 함수를 만든다. 이 함수는 모든 section을 숨기고, viewId에 해당하는 section만 보여준다.

3. 기능 요구사항 (script.js):

가. 초기화 및 목록 로드:
- 페이지 로드 시, GET /api/diaries를 호출하여 모든 일기 목록을 가져온다.
- 가져온 데이터로 diary-list(<ul>)에 li 요소들을 동적으로 생성하여 렌더링한다. 각 li에는 data-id로 일기 ID를 저장한다.
- showView('list-view')를 호출하여 목록 뷰를 보여준다.

나. 뷰 전환 로직:
- '새 일기 쓰기' 버튼 클릭: form-view를 보여준다. 폼 제목을 "새 일기 작성"으로 바꾸고 폼을 초기화한다.
- '취소' 버튼 클릭: list-view로 돌아간다.
- 일기 목록(li) 클릭:
    - 클릭된 li의 data-id를 가져온다.
    - GET /api/diaries/:id를 호출하여 해당 일기의 상세 데이터를 가져온다.
    - 가져온 데이터로 detail-view의 내용을 채운다.
    - showView('detail-view')를 호출한다.
- '목록으로' 버튼 클릭: list-view로 돌아간다.

다. CRUD 연동 로직:
- 일기 저장 (폼 제출):
    - diary-form의 submit 이벤트를 처리한다.
    - 숨겨진 diary-id 필드에 값이 있으면 수정(PUT), 없으면 생성(POST)으로 판단한다.
    - 각각에 맞는 API(POST /api/diaries 또는 PUT /api/diaries/:id)를 호출한다.
    - 성공 시, 목록을 새로고침하고 list-view로 전환한다.
- '수정' 버튼 클릭:
    - 현재 상세 보기 뷰의 데이터를 form-view의 각 필드에 채워 넣는다. (숨겨진 id 필드 포함)
    - 폼 제목을 "일기 수정"으로 바꾼다.
    - showView('form-view')를 호출한다.
- '삭제' 버튼 클릭:
    - 사용자에게 정말 삭제할 것인지 confirm()으로 확인한다.
    - DELETE /api/diaries/:id API를 호출한다.
    - 성공 시, 목록을 새로고침하고 list-view로 전환한다.
    